import*as v3d from"/node_modules/verge3d/build/v3d.module.js";const app=new v3d.App("v3d-container");app.loadScene("/models/DoorSmall. Closed.gltf",(()=>{app.enableControls(),app.run()}));import"../src/style.css";import ViewModal from"../src/viewmodal.js";import configMaterials from"../src/configMaterials.json";const canvas=document.querySelector("canvas.webgl"),scene=new v3d.Scene,dracoLoader=new DRACOLoader;dracoLoader.setDecoderPath("/draco/");const gltfLoader=new GLTFLoader;gltfLoader.setDRACOLoader(dracoLoader);const textureLoader=new v3d.TextureLoader;let viewModal=new ViewModal(textureLoader);const lightHolder=new v3d.Group,firstLight=new v3d.PointLight(16777215,1);firstLight.position.set(-1,1,3),lightHolder.add(firstLight);const secondLight=new v3d.PointLight(16777215,1);secondLight.position.set(1,1,-3),lightHolder.add(secondLight),scene.add(lightHolder);const sizes={width:window.innerWidth,height:window.innerHeight};window.addEventListener("resize",(()=>{sizes.width=window.innerWidth,sizes.height=window.innerHeight,camera.aspect=sizes.width/sizes.height,camera.updateProjectionMatrix(),renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))}));const camera=new v3d.PerspectiveCamera(25,sizes.width/sizes.height,.1,100);camera.position.set(0,1,6),scene.add(camera);const controls=new OrbitControls(camera,canvas);controls.enableDamping=!0;const renderer=new v3d.WebGLRenderer({canvas,antialias:!0});renderer.localClippingEnabled=!0,renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),renderer.setClearColor("#4287f5",1);const addModel=["/models/DoorSmall. Closed.glb","/models/DoorSmall. Open1.glb","/models/DoorBig. Closed.glb","/models/DoorBig. Open1.glb"];let currentModel;const nameMaterial={},jsonString=JSON.stringify(configMaterials),parsedConfig=JSON.parse(jsonString);function switchModel(e){let o=document.getElementById("models");o.innerHTML="",viewModal.createButtonsModels(addModel,"Модель №","modelButton",(function(e){switchModel(e)}),o),currentModel&&scene.remove(currentModel),gltfLoader.load(addModel[e],(e=>{currentModel=e.scene,currentModel.rotation.y=1.58,currentModel.position.y=-.8,scene.add(currentModel);let o=document.getElementById("materials");o.innerHTML="";let t=document.createElement("select");t.id="modelsCombobox";const n=function e(o,t,n=""){let r=[];for(const a in o){const i=n?`${n}.${a}`:a;n.endsWith(t)?r.push(i):"object"==typeof o[a]&&null!==o[a]&&(r=r.concat(e(o[a],t,i)))}return r}(configMaterials,"MeshPhysicalMaterial");console.log(n),n.forEach((function(e){let o=document.createElement("option");o.text=e,t.appendChild(o)})),t.addEventListener("change",(function(e){applyMaterial(e.target.value,configMaterials,currentModel)})),o.appendChild(t)}),void 0,(e=>{console.error("Произошла ошибка",e)}))}function applyMaterial(e,o,t){console.log(e),console.log(o),console.log(t),t.traverse((e=>{e.isMesh&&e.material&&(nameMaterial[e.material.name]=e.material)})),console.log(nameMaterial);const n=e.split(".");let r=parsedConfig;for(let e=0;e<n.length;e++)r=r[n[e]];console.log(r);let a=nameMaterial[r.shader_name];if(console.log("Material found:",a),console.log(r),a)return r.Texture.map?a.map=textureLoader.load(r.Texture.map):a.map=null,r.Texture.roughnessMap?a.roughnessMap=textureLoader.load(r.Texture.roughnessMap):a.roughnessMap=null,r.Texture.normalMap?a.normalMap=textureLoader.load(r.Texture.normalMap):a.normalMap=null,a.needsUpdate=!0,a;console.error(`Material with shader ID ${r.shader_name} not found.`)}document.addEventListener("DOMContentLoaded",(()=>{switchModel(0);const e=()=>{controls.update(),renderer.render(scene,camera),firstLight.quaternion.copy(camera.quaternion),secondLight.quaternion.copy(camera.quaternion),window.requestAnimationFrame(e)};e()}));